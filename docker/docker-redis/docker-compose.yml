services:
  redis:
    image: redis:7.2-alpine
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    image: pbdco/aws-spotter:redis
    container_name: spotter-api
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_PROFILE=an-aws-spotter
      - AWS_DEFAULT_REGION=ap-south-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - UPDATE_INTERVAL=${UPDATE_INTERVAL:-300}
      - CACHE_EXPIRY=${CACHE_EXPIRY:-600}
      - INSTANCE_TYPES=${INSTANCE_TYPES:-"t3.micro,t3.small,t3.medium"}
      - LOG_LEVEL=DEBUG
      - GUNICORN_WORKERS=20
    volumes:
      - ~/.aws:/root/.aws:ro
    command: ["gunicorn", "--bind", "0.0.0.0:5001", "--workers", "${GUNICORN_WORKERS:-8}", "api:app"]
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # phpredisadmin:
  #   #build: .
  #   image: erikdubbelboer/phpredisadmin:1.23
  #   container_name: phpredisadmin
  #   environment:
  #     - ADMIN_USER=admin
  #     - ADMIN_PASS=admin
  #     - REDIS_1_HOST=redis
  #     - REDIS_1_PORT=6379
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #   links:
  #     - redis
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   ports:
  #     - "8808:80"

volumes:
  redis_data:
